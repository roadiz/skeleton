name: ${APP_NAMESPACE}
services:
    db:
        hostname: db
        build:
            # Custom image for file permissions and performances
            target: mysql
            args:
                USER_UID: ${USER_UID}
        cap_add:
            - SYS_NICE  # CAP_SYS_NICE
        networks:
            - default
        volumes:
            - "./.data/db:/var/lib/mysql"
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
            MYSQL_DATABASE: ${MYSQL_DATABASE:-roadiz}
            MYSQL_USER: ${MYSQL_USER:-roadiz}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD:-roadiz}

    pma:
        image: phpmyadmin:5.2.1
        environment:
            PMA_HOST: ${MYSQL_HOST:-db}
            UPLOAD_LIMIT: 64M
            PMA_USER: ${MYSQL_USER:-roadiz}
            PMA_PASSWORD: ${MYSQL_PASSWORD:-roadiz}
        depends_on:
            - db
        networks:
            - frontproxynet
            - default
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.server.port=80"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_pma.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_pma.rule=Host(${HOSTNAME_PMA})"
            - "traefik.http.routers.${APP_NAMESPACE}_pma.service=${APP_NAMESPACE}_pma"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}_pma_secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}_pma_secure.tls=true"
            - "traefik.http.routers.${APP_NAMESPACE}_pma_secure.rule=Host(${HOSTNAME_PMA})"
            - "traefik.http.routers.${APP_NAMESPACE}_pma_secure.service=${APP_NAMESPACE}_pma"

    app: &app_template
        # Nginx does not resolve `app` hostname correctly
        hostname: app
        # Need to pass all vars to docker env for Crontab and supervisor scripts
        #env_file: "./.env.local"
        build:
            target: php-dev
            args:
                USER_UID: ${USER_UID}
        depends_on:
            - db
            - solr
            - redis
        volumes:
            - ./:/var/www/html
        networks:
            default:
        environment:
            TRUSTED_PROXIES: ${TRUSTED_PROXIES}
            USER_UID: ${USER_UID}
            DEFAULT_GATEWAY: ${DEFAULT_GATEWAY}

    nginx:
        image: roadiz/nginx-alpine:latest
        depends_on:
            - app
        volumes:
            - ./:/var/www/html
        networks:
            default:
#            frontproxynet:
#                aliases:
#                    - ${APP_NAMESPACE}_nginx
#        labels:
#            - "traefik.enable=true"
#            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.scheme=http"
#            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.port=80"
#            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.passhostheader=true"
#            # Enable healthcheck to prevent routing traffic to not-ready service
#            #- "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.path=/health-check"
#            #- "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.interval=10s"
#            #- "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.timeout=3s"
#            #- "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.headers.x-health-check=${APP_HEALTH_CHECK_TOKEN}"
#            # Listen HTTP
#            - "traefik.http.routers.${APP_NAMESPACE}.entrypoints=http"
#            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
#            - "traefik.http.routers.${APP_NAMESPACE}.rule=Host(${HOSTNAME}) && PathPrefix(${PATH_PREFIX})"
#            - "traefik.http.routers.${APP_NAMESPACE}.service=${APP_NAMESPACE}"
#            # Listen HTTPS
#            - "traefik.http.routers.${APP_NAMESPACE}_secure.entrypoints=https"
#            - "traefik.http.routers.${APP_NAMESPACE}_secure.tls=true"
#            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
#            - "traefik.http.routers.${APP_NAMESPACE}_secure.rule=Host(${HOSTNAME}) && PathPrefix(${PATH_PREFIX})"
#            - "traefik.http.routers.${APP_NAMESPACE}_secure.service=${APP_NAMESPACE}"

    worker:
        <<: *app_template
        hostname: worker
        deploy:
            # Do not use more than 1 replica if you're using Varnish and need to purge/ban cache
            # from your workers. Varnish ACL hostnames won't be resolved correctly.
            replicas: 1
        # official php-fpm image uses SIGQUIT
        stop_signal: SIGTERM
        entrypoint: [ "php", "/var/www/html/bin/console", "messenger:consume", "async", "--time-limit=600" ]
        restart: unless-stopped

    cron:
        <<: *app_template
        hostname: cron
        # official php-fpm image uses SIGQUIT
        stop_signal: SIGTERM
        entrypoint: 'docker-cron-entrypoint'
        restart: unless-stopped
        user: root

    solr:
        build:
            # Custom image for file permissions
            target: solr
            args:
                USER_UID: ${USER_UID}
        volumes:
            - "solr:/var/solr"
        environment:
            SOLR_UID: ${USER_UID}
            SOLR_GID: ${USER_UID}
        command:
            - solr-precreate
            - ${SOLR_CORE_NAME}
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_solr
            default:
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.server.port=8983"
            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_solr.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_solr.rule=Host(${HOSTNAME_SOLR})"
            - "traefik.http.routers.${APP_NAMESPACE}_solr.service=${APP_NAMESPACE}_solr"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}_solr_secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}_solr_secure.tls=true"
            - "traefik.http.routers.${APP_NAMESPACE}_solr_secure.rule=Host(${HOSTNAME_SOLR})"
            - "traefik.http.routers.${APP_NAMESPACE}_solr_secure.service=${APP_NAMESPACE}_solr"

    mailer:
        hostname: mailer
        image: axllent/mailpit
        networks:
            - frontproxynet
            - default
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.server.port=8025"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.rule=Host(${HOSTNAME_MAILER})"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.service=${APP_NAMESPACE}_mailer"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}_mailer_secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer_secure.tls=true"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer_secure.rule=Host(${HOSTNAME_MAILER})"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer_secure.service=${APP_NAMESPACE}_mailer"

    # Use Redis for Cache, Messaging and Sessions
    redis:
        hostname: redis
        image: redis:7-alpine
        volumes:
            - redis:/data
        networks:
            - default

    redis-commander:
        image: ghcr.io/joeferner/redis-commander:0.9.0
        environment:
            REDIS_HOST: redis
        depends_on:
            - redis

    varnish:
        build:
            target: varnish
        tmpfs: /var/lib/varnish/varnishd:exec
        depends_on:
            - nginx
        links:
            - nginx:nginx
            - app:app
            - cron:cron
            - worker:worker
        networks:
            - frontproxynet
            - default
        environment:
            VARNISH_SIZE: ${VARNISH_SIZE}
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.server.port=80"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.passhostheader=true"
            # Enable healthcheck to prevent routing traffic to not-ready service
            #- "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.healthcheck.path=/health-check"
            #- "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.healthcheck.interval=10s"
            #- "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.healthcheck.timeout=3s"
            #- "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.healthcheck.headers.x-health-check=${APP_HEALTH_CHECK_TOKEN}"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.entrypoints=http"
            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.rule=Host(${HOSTNAME_VARNISH}) && PathPrefix(${PATH_PREFIX})"
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.service=${APP_NAMESPACE}_varnish"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}_varnish_secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}_varnish_secure.tls=true"
            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
            - "traefik.http.routers.${APP_NAMESPACE}_varnish_secure.rule=Host(${HOSTNAME_VARNISH}) && PathPrefix(${PATH_PREFIX})"
            - "traefik.http.routers.${APP_NAMESPACE}_varnish_secure.service=${APP_NAMESPACE}_varnish"

networks:
    frontproxynet:
        external: true
    # If you need to use port forwarding, fixing default gateway can be useful
    # to keep same host IP address between service restarts
    default:
        ipam:
            driver: default
            config:
                -   subnet: ${DEFAULT_GATEWAY}/24

volumes:
    redis:
    solr:
