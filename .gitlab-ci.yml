stages:
    - test
    - build
    - release

# AutoDevOps templates for security
include:
    - template: Jobs/Secret-Detection.gitlab-ci.yml
    - template: Jobs/Dependency-Scanning.gitlab-ci.yml

variables:
    # Timezone will be used both for system and php date.timezone php.ini value
    COMPOSER_MEMORY_LIMIT: '-1'
    TIMEZONE: "Europe/Paris"
    SENTRY_URL: ""

roadiz_skeleton_test:
    image: roadiz/php83-runner
    stage: test
    interruptible: true
    only:
        - develop
        - tags
    cache:
        key: ${CI_COMMIT_REF_SLUG}
        paths:
            - vendor/
    variables:
        XDEBUG_MODE: "coverage"
    artifacts:
        expire_in: 1 day
        paths:
            - coverage
        reports:
            junit: coverage/report.xml
            coverage_report:
                coverage_format: cobertura
                path: coverage/cobertura.xml
    script:
        #
        # If you are using private repositories, you need to provide a COMPOSER_DEPLOY_TOKEN variable
        # in your Gitlab / GitHub CI/CD settings. This deploy-token must have read access to your private repositories.
        #
        - composer install
        - php -d memory_limit=-1 vendor/bin/php-cs-fixer check --ansi -vvv
        - php -d memory_limit=-1 vendor/bin/phpstan analyse -c phpstan.neon
        - php -d memory_limit=-1 vendor/bin/phpunit --colors=never

roadiz_skeleton_build_develop:
    stage: build
    image: docker:git
    # Create a docker image only when a new tag is pushed
    only:
        - develop
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
    when: on_success
    script:
        # Connect to your Gitlab Registry
        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for develop\""
        - "docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}"
        # App image build
        - "docker build --target=php-prod -t ${CI_REGISTRY_IMAGE}:develop ."
        - "docker push ${CI_REGISTRY_IMAGE}:develop"
        ## Solr image build
        #- "docker build --target=solr -t ${CI_REGISTRY_IMAGE}/solr:develop ."
        #- "docker push ${CI_REGISTRY_IMAGE}/solr:develop"
        # Nginx image build
        - "docker build --target=nginx-prod -t ${CI_REGISTRY_IMAGE}/nginx:develop ."
        - "docker push ${CI_REGISTRY_IMAGE}/nginx:develop"
        # Varnish image build
        - "docker build --target=varnish -t ${CI_REGISTRY_IMAGE}/varnish:develop ."
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:develop"

#
# Build App docker image with vendor and built assets
# included. You must configure your Gitlab Runner to
# support Docker-in-docker commands.
#
roadiz_skeleton_build_tag:
    stage: build
    image: docker:git
    # Create a docker image only when a new tag is pushed
    only:
        - tags
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
    when: on_success
#    before_script:
#        # Need curl for pushing release to Sentry
#        - apk add curl
    script:
        # Connect to your Gitlab Registry
        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for tag ${CI_COMMIT_TAG}\""
        - "docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}"
        # App image build
        - "docker build --target=php-prod -t ${CI_REGISTRY_IMAGE}:latest -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} ."
        - "docker push ${CI_REGISTRY_IMAGE}:latest"
        - "docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
        ## Solr image build
        #- "docker build --target=solr -t ${CI_REGISTRY_IMAGE}/solr:latest -t ${CI_REGISTRY_IMAGE}/solr:${CI_COMMIT_TAG} ."
        #- "docker push ${CI_REGISTRY_IMAGE}/solr:latest"
        #- "docker push ${CI_REGISTRY_IMAGE}/solr:${CI_COMMIT_TAG}"
        # Nginx image build
        - "docker build --target=nginx-prod -t ${CI_REGISTRY_IMAGE}/nginx:latest -t ${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_TAG} ."
        - "docker push ${CI_REGISTRY_IMAGE}/nginx:latest"
        - "docker push ${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_TAG}"
        # Varnish image build
        - "docker build --target=varnish -t ${CI_REGISTRY_IMAGE}/varnish:latest -t ${CI_REGISTRY_IMAGE}/varnish:${CI_COMMIT_TAG} ."
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:latest"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:${CI_COMMIT_TAG}"
        # Create Release on your app on Sentry
        #- "curl ${SENTRY_URL} -X POST -H \"Content-Type: application/json\" -d \"{\\\"version\\\": \\\"${CI_COMMIT_TAG}\\\"}\""

create_gitlab_release:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    rules:
        - if: $CI_COMMIT_TAG
    script:
        - echo "Running the release job."
    needs: [ "roadiz_skeleton_build_tag" ]
    when: on_success
    release:
        tag_name: $CI_COMMIT_TAG
        name: 'Release $CI_COMMIT_TAG'
        description: './CHANGELOG.md'
