image: roadiz/php81-runner

stages:
    - test
    - build
    - deploy
    - release

variables:
    # Timezone will be used both for system and php date.timezone php.ini value
    COMPOSER_MEMORY_LIMIT: '-1'
    TIMEZONE: "Europe/Paris"
    SENTRY_URL: ""

roadiz_skeleton_test:
    stage: test
    interruptible: true
    only:
        - develop
        - tags
    cache:
        key: ${CI_COMMIT_REF_SLUG}
        paths:
            - vendor/
    before_script:
        #- eval "$(ssh-agent -s)"
        #- echo "$COMPOSER_SERVER_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        ##
        ## Create the SSH directory and give it the right permissions
        ##
        #- mkdir -p ~/.ssh
        #- chmod 700 ~/.ssh
        # Use your Gitlab instance URL
        #- ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
        #- ssh-keyscan -H 'github.com' >> ~/.ssh/known_hosts
    script:
        - composer install
        - php -d memory_limit=-1 vendor/bin/phpcs -p ./src
        - php -d memory_limit=-1 vendor/bin/phpstan analyse -c phpstan.neon

roadiz_skeleton_build:
    stage: build
    interruptible: true
    only:
        - develop
        - tags
    cache:
        key: ${CI_COMMIT_REF_SLUG}
        paths:
            - vendor/
    artifacts:
        expire_in: 1 hour
        paths:
            - vendor/
            # Keep themes assets to include them in docker image
            - web/themes/
    before_script:
        - eval "$(ssh-agent -s)"
        - echo "$COMPOSER_SERVER_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        ##
        ## Create the SSH directory and give it the right permissions
        ##
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        # Use your Gitlab instance URL
        - ssh-keyscan -H 'gitlab.rezo-zero.com' >> ~/.ssh/known_hosts
        - ssh-keyscan -H 'github.com' >> ~/.ssh/known_hosts
    script:
        - composer install --optimize-autoloader --apcu-autoloader
        - php bin/console themes:assets:install Rozier

roadiz_skeleton_dev_docker:
    stage: deploy
    image: docker:git
    # Create a docker image only when a new tag is pushed
    only:
        - develop
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
    when: on_success
    needs: ["roadiz_skeleton_build"]
    dependencies: ["roadiz_skeleton_build"]
    script:
        # Connect to your Gitlab Registry
        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for develop\""
        - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
        # App image build
        - "docker build -t ${CI_REGISTRY_IMAGE} ."
        - "docker tag ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_IMAGE}:develop"
        - "docker push ${CI_REGISTRY_IMAGE}:develop"
        # Solr image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/solr ./docker/solr"
        - "docker tag ${CI_REGISTRY_IMAGE}/solr ${CI_REGISTRY_IMAGE}/solr:develop"
        - "docker push ${CI_REGISTRY_IMAGE}/solr:develop"
        # Varnish image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/varnish ./docker/varnish"
        - "docker tag ${CI_REGISTRY_IMAGE}/varnish ${CI_REGISTRY_IMAGE}/varnish:develop"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:develop"

#
# Build App docker image with vendor and built assets
# included. You must configure your Gitlab Runner to
# support Docker-in-docker commands.
#
roadiz_skeleton_docker:
    stage: deploy
    image: docker:git
    # Create a docker image only when a new tag is pushed
    only:
        - tags
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
    when: on_success
    needs: ["roadiz_skeleton_build"]
    dependencies: ["roadiz_skeleton_build"]
    before_script:
        # Need curl for pushing release to Sentry
        #- apk add curl
    script:
        # Connect to your Gitlab Registry
        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for tag ${CI_COMMIT_TAG}\""
        - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
        # App image build
        - "docker build -t ${CI_REGISTRY_IMAGE} ."
        - "docker tag ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
        - "docker push ${CI_REGISTRY_IMAGE}:latest"
        - "docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
        # Solr image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/solr ./docker/solr"
        - "docker tag ${CI_REGISTRY_IMAGE}/solr ${CI_REGISTRY_IMAGE}/solr:${CI_COMMIT_TAG}"
        - "docker push ${CI_REGISTRY_IMAGE}/solr:latest"
        - "docker push ${CI_REGISTRY_IMAGE}/solr:${CI_COMMIT_TAG}"
        # Varnish image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/varnish ./docker/varnish"
        - "docker tag ${CI_REGISTRY_IMAGE}/varnish ${CI_REGISTRY_IMAGE}/varnish:${CI_COMMIT_TAG}"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:latest"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:${CI_COMMIT_TAG}"
        # Create Release on your app on Sentry
        #- "curl ${SENTRY_URL} -X POST -H \"Content-Type: application/json\" -d \"{\\\"version\\\": \\\"${CI_COMMIT_TAG}\\\"}\""

create_gitlab_release:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    rules:
        - if: $CI_COMMIT_TAG
    script:
        - echo "Running the release job."
    needs: [ "roadiz_skeleton_docker" ]
    when: on_success
    release:
        tag_name: $CI_COMMIT_TAG
        name: 'Release $CI_COMMIT_TAG'
        description: './CHANGELOG.md'
