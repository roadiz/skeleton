# Production template
# Replace “my-registry/roadiz_skeleton” with your own project registry URL
version: '3'
services:
    db:
        image: mysql:8.0
        restart: always
        cap_add:
            - SYS_NICE  # CAP_SYS_NICE
        networks:
            default:
        volumes:
            - db_data:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    varnish:
        image: my-registry/roadiz_skeleton/varnish:latest
        restart: always
        tmpfs: /var/lib/varnish/varnishd:exec
        depends_on:
            - app
        links:
            - app:app
        environment:
            VARNISH_SIZE: ${VARNISH_SIZE}
        networks:
            - frontproxynet
            - default
        labels:
            - "traefik.enable=true"
            - "com.centurylinklabs.watchtower.enable=true"
            # Traefik v2 -----------------------------------------------------
            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.port=80"
            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.passhostheader=true"
            # Enable healthcheck to prevent routing traffic to not-ready service
            # - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.path=/health-check"
            # - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.interval=10s"
            # - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.timeout=3s"
            # - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.headers.x-health-check=${APP_HEALTH_CHECK_TOKEN}"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}.entrypoints=http"
            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
            - "traefik.http.routers.${APP_NAMESPACE}.rule=Host(${HOSTNAME}) && PathPrefix(${PATH_PREFIX})"
            - "traefik.http.routers.${APP_NAMESPACE}.service=${APP_NAMESPACE}"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}_secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}_secure.tls=true"
            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
            - "traefik.http.routers.${APP_NAMESPACE}_secure.rule=Host(${HOSTNAME}) && PathPrefix(${PATH_PREFIX})"
            - "traefik.http.routers.${APP_NAMESPACE}_secure.service=${APP_NAMESPACE}"
            #
            # Apply middlewares
            #
            - "traefik.http.routers.${APP_NAMESPACE}_secure.middlewares=${APP_NAMESPACE}Redirectregex"
            - "traefik.http.routers.${APP_NAMESPACE}.middlewares=${APP_NAMESPACE}Redirectregex,${APP_NAMESPACE}Redirectscheme"
            # Add domain redirection (${APP_NAMESPACE} non-www to www redir)
            - "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.regex=${REDIRECT_REGEX}"
            - "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.replacement=${REDIRECT_REPLACEMENT}"
            - "traefik.http.middlewares.${APP_NAMESPACE}Redirectregex.redirectregex.permanent=true"
            # Add SSL redirection
            - "traefik.http.middlewares.${APP_NAMESPACE}Redirectscheme.redirectscheme.scheme=https"
            - "traefik.http.middlewares.${APP_NAMESPACE}Redirectscheme.redirectscheme.permanent=true"

    app:
        image: my-registry/roadiz_skeleton:latest
        restart: always
        depends_on:
            - db
        volumes:
            - app_file_data:/var/www/html/public/files
            - app_assets_data:/var/www/html/public/assets
            - app_private_file_data:/var/www/html/var/files
            - ./robots.txt:/var/www/html/public/robots.txt:ro
            # Use docker-compose env file as .env.local in container
            - ./.env:/var/www/html/.env.local:ro
            # Generate JWT certificates on your host and share them to docker container
            #- ./jwt_private.pem:/var/www/html/config/jwt/private.pem:ro
            #- ./jwt_public.pem:/var/www/html/config/jwt/public.pem:ro
        networks:
            - default
        environment:
            MYSQL_HOST: ${MYSQL_HOST}
            MYSQL_PORT: ${MYSQL_PORT}
        labels:
            - "com.centurylinklabs.watchtower.enable=true"

    solr:
        image: my-registry/roadiz_skeleton/solr:latest
        volumes:
            - "solr_data:/var/solr:delegated"
        command:
            - solr-precreate
            - ${SOLR_CORE_NAME}
        restart: always
        networks:
            - default

volumes:
    app_file_data:
    app_assets_data:
    app_private_file_data:
    db_data:
    solr_data:

networks:
    frontproxynet:
        external: true
#    # Only set subnet gateway if default overlaps an existing network
#    default:
#        ipam:
#            driver: default
#            config:
#                -   subnet: ${DEFAULT_GATEWAY}/16
