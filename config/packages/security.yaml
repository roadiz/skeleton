security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        jwt:
            lexik_jwt: ~
        openid_user_provider:
            id: RZ\Roadiz\OpenId\Authentication\Provider\OpenIdAccountProvider
        roadiz_user_provider:
            entity:
                class: RZ\Roadiz\CoreBundle\Entity\User
                property: username
        all_users:
            chain:
                providers: [ 'openid_user_provider', 'roadiz_user_provider' ]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # https://symfony.com/bundles/LexikJWTAuthenticationBundle/current/index.html#configure-application-routing
        api_login:
            pattern: ^/api/token
            stateless: true
            provider: all_users
            login_throttling:
                max_attempts: 3
            json_login:
                check_path: /api/token
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            user_checker: RZ\Roadiz\CoreBundle\Security\UserChecker

        # https://symfony.com/bundles/LexikJWTAuthenticationBundle/current/8-jwt-user-provider.html#symfony-5-3-and-higher
        api:
            pattern: ^/api
            stateless: true
            # Do not reload user from database, trust JWT roles in order to restrict PreviewUsers
            # Only drawback is when you want to disable / block / expire a user, you'll have to
            # wait for JWT token to expire.
            provider: jwt
            # If you really want to reload user from database, uncomment this line, but Preview JWT
            # will be reloaded as full user and not as PreviewUser.
            #provider: all_users
            jwt: ~

        # disables session creation for assets and healthcheck controllers
        assets:
            pattern: ^/assets
            stateless: true
            security: false
        healthCheck:
            pattern: ^/health-check$
            stateless: true
            security: false
        main:
            lazy: true
            provider: all_users

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: { role: ROLE_SUPERADMIN, parameter: _su }
            entry_point: RZ\Roadiz\RozierBundle\Security\RozierAuthenticator
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
            login_throttling:
                max_attempts: 3
            logout:
                path: logoutPage
            user_checker: RZ\Roadiz\CoreBundle\Security\UserChecker
            custom_authenticator:
                - RZ\Roadiz\RozierBundle\Security\RozierAuthenticator
                # Enables OpenId on backoffice entrypoint
                - roadiz_rozier.open_id.authenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/rz-admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/rz-admin, roles: ROLE_BACKEND_USER }
        - { path: ^/api/token, roles: PUBLIC_ACCESS }
        #- { path: ^/api/newsletter_form/post, methods: [ POST ], roles: PUBLIC_ACCESS }
        - { path: ^/api/contact_form/post, methods: [ POST ], roles: PUBLIC_ACCESS }
        - { path: "^/api/custom_forms/(?:[0-9]+)/post", methods: [ POST ], roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: ROLE_BACKEND_USER, methods: [ POST, PUT, PATCH, DELETE ] }
        ##
        ##  roadiz/two-factor-bundle and roadiz/user-bundle config
        ##
        #- { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        #- { path: "^/api/users/signup", methods: [ POST ], roles: PUBLIC_ACCESS }
        #- { path: "^/api/users/password_request", methods: [ POST ], roles: PUBLIC_ACCESS }
        #- { path: "^/api/users/password_reset", methods: [ PUT ], roles: PUBLIC_ACCESS }
        #- { path: "^/api/users", methods: [ GET, PUT, PATCH, POST ], roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }
