version: '3'
services:
    db:
        build:
            # Custom image for file permissions
            context: ./docker/mysql
            args:
                USER_UID: ${USER_UID}
        cap_add:
            - SYS_NICE  # CAP_SYS_NICE
        networks:
            default:
        volumes:
            - "./.data/db:/var/lib/mysql:delegated"
            - "./docker/mysql/performances.cnf:/etc/mysql/conf.d/performances.cnf"
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    pma:
        image: phpmyadmin/phpmyadmin
#        ports:
#            - ${PUBLIC_PMA_PORT}:80/tcp
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_HOST: ${MYSQL_HOST}
            MYSQL_PORT: ${MYSQL_PORT}
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_pma
            default:
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.server.port=80"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_pma.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_pma.rule=Host(${HOSTNAME_PMA})"
            - "traefik.http.routers.${APP_NAMESPACE}_pma.service=${APP_NAMESPACE}_pma"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}_pma_secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}_pma_secure.tls=true"
            - "traefik.http.routers.${APP_NAMESPACE}_pma_secure.rule=Host(${HOSTNAME_PMA})"
            - "traefik.http.routers.${APP_NAMESPACE}_pma_secure.service=${APP_NAMESPACE}_pma"

    app:
        # Need to pass all vars to docker env for Crontab and supervisor scripts
        #env_file: "./.env.local"
        build:
            context: ./docker/php-fpm-alpine
            args:
                USER_UID: ${USER_UID}
        depends_on:
            - db
            #- solr
            - redis
        volumes:
            - ./:/var/www/html:cached
        networks:
            default:
        environment:
            TRUSTED_PROXIES: ${TRUSTED_PROXIES}
            USER_UID: ${USER_UID}
            DEFAULT_GATEWAY: ${DEFAULT_GATEWAY}
            MYSQL_HOST: ${MYSQL_HOST}
            MYSQL_PORT: ${MYSQL_PORT}
            APP_ENV: dev
            APP_RUNTIME_ENV: dev
            APP_DEBUG: 1
            #BLACKFIRE_LOG_LEVEL: ${BLACKFIRE_LOG_LEVEL}
            #BLACKFIRE_SERVER_ID: ${BLACKFIRE_SERVER_ID}
            #BLACKFIRE_SERVER_TOKEN: ${BLACKFIRE_SERVER_TOKEN}
            #BLACKFIRE_CLIENT_ID: ${BLACKFIRE_CLIENT_ID}
            #BLACKFIRE_CLIENT_TOKEN: ${BLACKFIRE_CLIENT_TOKEN}
            #BLACKFIRE_ENDPOINT: "https://blackfire.io"

    nginx:
        image: roadiz/nginx-alpine:latest
#        ports:
#            - ${PUBLIC_APP_PORT}:80/tcp
        depends_on:
            - app
        # Nginx does not resolve `app` hostname correctly
        links:
            - app:app
        volumes:
            - ./:/var/www/html:cached
        networks:
            default:
#            frontproxynet:
#                aliases:
#                    - ${APP_NAMESPACE}_app
#        labels:
#            - "traefik.enable=true"
#            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.scheme=http"
#            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.port=80"
#            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.passhostheader=true"
#            # Enable healthcheck to prevent routing traffic to not-ready service
#            #- "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.path=/health-check"
#            #- "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.interval=10s"
#            #- "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.timeout=3s"
#            #- "traefik.http.services.${APP_NAMESPACE}.loadbalancer.healthcheck.headers.x-health-check=${APP_HEALTH_CHECK_TOKEN}"
#            # Listen HTTP
#            - "traefik.http.routers.${APP_NAMESPACE}.entrypoints=http"
#            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
#            - "traefik.http.routers.${APP_NAMESPACE}.rule=Host(${HOSTNAME}) && PathPrefix(${PATH_PREFIX})"
#            - "traefik.http.routers.${APP_NAMESPACE}.service=${APP_NAMESPACE}"
#            # Listen HTTPS
#            - "traefik.http.routers.${APP_NAMESPACE}_secure.entrypoints=https"
#            - "traefik.http.routers.${APP_NAMESPACE}_secure.tls=true"
#            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
#            - "traefik.http.routers.${APP_NAMESPACE}_secure.rule=Host(${HOSTNAME}) && PathPrefix(${PATH_PREFIX})"
#            - "traefik.http.routers.${APP_NAMESPACE}_secure.service=${APP_NAMESPACE}"

    worker:
        extends: app
        deploy:
            replicas: 1
        entrypoint: [ "php", "/var/www/html/bin/console", "messenger:consume", "async", "--time-limit=600" ]
        restart: unless-stopped

    cron:
        extends: app
        # https://github.com/dubiousjim/dcron/issues/13#issuecomment-1406937781
        init: true
        entrypoint: [ "crond", "-f", "-L", "15" ]
        restart: unless-stopped

#    solr:
#        build:
#            # Custom image for file permissions
#            context: ./docker/solr
#            args:
#                USER_UID: ${USER_UID}
##        ports:
##            - "${PUBLIC_SOLR_PORT}:8983/tcp"
#        volumes:
#            - "./.data/solr:/var/solr:delegated"
#        environment:
#            SOLR_UID: ${USER_UID}
#            SOLR_GID: ${USER_UID}
#        command:
#            - solr-precreate
#            - ${SOLR_CORE_NAME}
#        networks:
#            frontproxynet:
#                aliases:
#                    - ${APP_NAMESPACE}_solr
#            default:
#        labels:
#            - "traefik.enable=true"
#            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.server.scheme=http"
#            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.server.port=8983"
#            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.passhostheader=true"
#            # Listen HTTP
#            - "traefik.http.routers.${APP_NAMESPACE}_solr.entrypoints=http"
#            - "traefik.http.routers.${APP_NAMESPACE}_solr.rule=Host(${HOSTNAME_SOLR})"
#            - "traefik.http.routers.${APP_NAMESPACE}_solr.service=${APP_NAMESPACE}_solr"
#            # Listen HTTPS
#            - "traefik.http.routers.${APP_NAMESPACE}_solr_secure.entrypoints=https"
#            - "traefik.http.routers.${APP_NAMESPACE}_solr_secure.tls=true"
#            - "traefik.http.routers.${APP_NAMESPACE}_solr_secure.rule=Host(${HOSTNAME_SOLR})"
#            - "traefik.http.routers.${APP_NAMESPACE}_solr_secure.service=${APP_NAMESPACE}_solr"

    mailer:
        image: mailhog/mailhog
#        ports:
#            - ${PUBLIC_MAILER_PORT}:8025/tcp
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_mailer
            default:
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.server.port=8025"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.rule=Host(${HOSTNAME_MAILER})"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.service=${APP_NAMESPACE}_mailer"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}_mailer_secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer_secure.tls=true"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer_secure.rule=Host(${HOSTNAME_MAILER})"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer_secure.service=${APP_NAMESPACE}_mailer"

#    blackfire:
#        image: blackfire/blackfire
#        environment:
#            # Exposes BLACKFIRE_* environment variables from the host
#            BLACKFIRE_LOG_LEVEL: ${BLACKFIRE_LOG_LEVEL}
#            BLACKFIRE_SERVER_ID: ${BLACKFIRE_SERVER_ID}
#            BLACKFIRE_SERVER_TOKEN: ${BLACKFIRE_SERVER_TOKEN}
#            BLACKFIRE_CLIENT_ID: ${BLACKFIRE_CLIENT_ID}
#            BLACKFIRE_CLIENT_TOKEN: ${BLACKFIRE_CLIENT_TOKEN}

    # Use Redis for Cache, Messaging and Sessions
    redis:
        image: redis:7-alpine
        networks:
            - default

    varnish:
        build:
            context: ./docker/varnish
        tmpfs: /var/lib/varnish/varnishd:exec
        depends_on:
            - nginx
        links:
            - nginx:nginx
#        ports:
#            - ${PUBLIC_VARNISH_PORT}:80/tcp
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_varnish
            default:
        environment:
            VARNISH_SIZE: ${VARNISH_SIZE}
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.server.port=80"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.passhostheader=true"
            # Enable healthcheck to prevent routing traffic to not-ready service
            #- "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.healthcheck.path=/health-check"
            #- "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.healthcheck.interval=10s"
            #- "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.healthcheck.timeout=3s"
            #- "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.healthcheck.headers.x-health-check=${APP_HEALTH_CHECK_TOKEN}"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.entrypoints=http"
            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.rule=Host(${HOSTNAME_VARNISH}) && PathPrefix(${PATH_PREFIX})"
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.service=${APP_NAMESPACE}_varnish"
            # Listen HTTPS
            - "traefik.http.routers.${APP_NAMESPACE}_varnish_secure.entrypoints=https"
            - "traefik.http.routers.${APP_NAMESPACE}_varnish_secure.tls=true"
            # Combine Host and PathPrefix to allow API and Frontend to share same domain name
            - "traefik.http.routers.${APP_NAMESPACE}_varnish_secure.rule=Host(${HOSTNAME_VARNISH}) && PathPrefix(${PATH_PREFIX})"
            - "traefik.http.routers.${APP_NAMESPACE}_varnish_secure.service=${APP_NAMESPACE}_varnish"

networks:
    frontproxynet:
        external: true
    # If you need to use port forwarding, fixing default gateway can be useful
    # to keep same host IP address between service restarts
    default:
        ipam:
            driver: default
            config:
                -   subnet: ${DEFAULT_GATEWAY}/16
